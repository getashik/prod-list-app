{"version":3,"sources":["actions/awsList.js","components/AwsList.jsx","components/AddUser.jsx","App.js","serviceWorker.js","reducer/awsList.js","reducer/index.js","index.js"],"names":["APIURL","process","GetList","dispatch","fetch","concat","then","res","json","result","type","payLoad","error","alert","Row","data","this","props","id","method","body","JSON","stringify","headers","Content-Type","react_default","a","createElement","userName","email","onClick","delItem","bind","Component","AwsList","_this","awsReducer","map","key","AwsList_Row","Object","assign","connect","state","AddUser","name","refs","value","ref","add","App","className","components_AddUser","components_AwsList","loadAwsData","Boolean","window","location","hostname","match","ListApp","combineReducers","arguments","length","undefined","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9224292.chunk.js","sourcesContent":["const APIURL=process.env.REACT_APP_API_URL;\r\nexport const GetList = function () {\r\n    return function(dispatch){\r\n    fetch(`${APIURL}/get`)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n         \r\n          \r\n            dispatch(\r\n                {\r\n                    type: \"GETAWSLIST\",\r\n                    payLoad: result\r\n                })\r\n\t// \t dispatch( returnUserdata(\r\n\t// \tresult.data\r\n\t//    ))\r\n           \r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n           alert(\"Erooor\");\r\n        }\r\n      ) \r\n    }\r\n    \r\n    \r\n\r\n}\r\n\r\n\r\nexport const PushUser = function (data) {\r\n    \r\n    return function(dispatch){\r\n    fetch(`${APIURL}/put`,\r\n    {\r\n      method: 'POST', // or 'PUT'\r\n      body: JSON.stringify(data), // data can be `string` or {object}!\r\n      headers:{\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }\r\n    )\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n         \r\n          \r\n          dispatch(GetList())\r\n           \r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n           alert(\"Erooor\");\r\n        }\r\n      ) \r\n    }\r\n    \r\n    \r\n\r\n}\r\n\r\nexport const DeleteUser = function (data) {\r\n    \r\n  return function(dispatch){\r\n  fetch(`${APIURL}/delete`,\r\n  {\r\n    method: 'POST', // or 'PUT'\r\n    body: JSON.stringify(data), // data can be `string` or {object}!\r\n    headers:{\r\n      'Content-Type': 'application/json'\r\n    }\r\n  }\r\n  )\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n       \r\n        \r\n        dispatch(GetList())\r\n         \r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n         alert(\"Erooor\");\r\n      }\r\n    ) \r\n  }\r\n  \r\n  \r\n\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport {DeleteUser} from '../actions/awsList';\r\n\r\nclass Row extends Component{\r\n\r\n    delItem(){\r\n        this.props.dispatch(DeleteUser({id:this.props.id}));\r\n    }\r\n\r\n    render(){\r\n\r\n        return(<li>{ this.props.userName} ----- {this.props.email}<button onClick={this.delItem.bind(this)}>Delete</button></li>);\r\n    }\r\n}\r\n\r\nclass AwsList extends Component{\r\n\r\n   \r\n\r\n    render(){\r\n        \r\n        return(<div>\r\n          \r\n            <ul>{ \r\n                this.props.awsReducer.awsReducer.map((data,key)=> <Row key={key} {...data} dispatch={this.props.dispatch}/>)\r\n               \r\n        }</ul>\r\n            </div>);\r\n    }\r\n\r\n}\r\n\r\nfunction select(state){\r\n\treturn {awsReducer:state};\r\n}\r\n\r\nexport default connect(select) (AwsList);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport {PushUser} from '../actions/awsList';\r\n\r\n\r\nclass AddUser extends Component{\r\n\r\n    add(){\r\n\t\tthis.props.dispatch(PushUser({name:this.refs.name.value,email:this.refs.email.value}));\r\n\t\tthis.refs.name.value=\"\";\r\n\t\tthis.refs.email.value=\"\";\r\n\t\t\r\n    }\r\n    \r\nrender(){\r\n\r\n    return(\r\n        <div>\r\n\t\t<div><label>Name: </label> <input ref=\"name\" /></div>\r\n\t\t<div><label>Email: </label> <input ref=\"email\" /> <button onClick={this.add.bind(this)}>Add</button></div>\r\n\t\t\r\n\t\t</div>\r\n    );\r\n}\r\n\r\n}\r\n\r\nfunction select(state){\r\n\treturn {awsReducer:state};\r\n}\r\n\r\nexport default connect(select) (AddUser);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport AwsList from './components/AwsList';\r\nimport {GetList} from './actions/awsList';\r\nimport AddUser from \"./components/AddUser\";\r\nimport './App.css';\r\n\r\nclass Myname extends Component{\r\n render(){\r\n  return(<div>Ashik</div>);\r\n}\r\n}\r\n\r\n\r\nclass App extends Component {\r\n loadAwsData(){\r\n\r\n  this.props.dispatch(GetList());\r\n }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header >\r\n          <AddUser></AddUser>\r\n          <AwsList></AwsList>\r\n          <button onClick={()=>{this.loadAwsData()}} >Get List</button>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction select(state){\r\n\treturn {awsReducer:state};\r\n}\r\n\r\nexport default connect(select) (App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const awsReducer = (state=[{userName:\"Ashik\"}],action) => {\r\n    \r\n    switch(action.type){\r\n\r\n        case \"GETAWSLIST\":\r\n         return Object.assign([],action.payLoad);\r\n        break;\r\n        default:\r\n        return state;\r\n       \r\n\r\n    }\r\n}","import {awsReducer} from \"./awsList\";\r\nimport {combineReducers} from \"redux\";\r\nconst ListApp = combineReducers({ awsReducer});\r\nexport default ListApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Provider} from  'react-redux';\r\nimport { createStore,applyMiddleware }  from 'redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ListApp  from \"./reducer/index\";\r\nimport thunk from 'redux-thunk'; \r\n\r\nlet store=createStore(ListApp,applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n     <Provider store = {store}> \r\n     <App />\r\n     </Provider>\r\n     , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}